const config = require('config')
const { Telegraf, session, Markup } = require('telegraf')
const { message } = require('telegraf/filters')
const { Scenes } = require('telegraf')

const bot = new Telegraf(config.get('TELEGRAM_TOKEN'), {
	handlerTimeout: Infinity,
})

const contactDataWizard = new Scenes.WizardScene(
	'CONTACT_DATA_WIZARD_SCENE_ID', // first argument is Scene_ID, same as for BaseScene
	ctx => {
		ctx.reply('–î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è . –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')
		ctx.wizard.state.contactData = {}
		return ctx.wizard.next()
	},
	ctx => {
		// validation example
		if (ctx.message.text.length < 2) {
			ctx.reply(`–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π—Ç–µ . –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è`)
			return
		}
		ctx.wizard.state.contactData.fio = ctx.message.text
		check(ctx)
		ctx.reply(`–ö–∞–∫–æ–π –≤–∞—à –≤–µ—Å ${ctx.message.text}?`)
		return ctx.wizard.next()
	},
	async ctx => {
		ctx.wizard.state.contactData.weight = ctx.message.text.replace('–∫–≥', '')
		ctx.reply(
			'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å –∏ –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞–Ω–∞...'
		)
		//await mySendContactDataMomentBeforeErase(ctx.wizard.state.contactData)
		return ctx.scene.leave()
	}
)
const stage = new Scenes.Stage([contactDataWizard])
bot.use(session())
bot.use(stage.middleware())

bot.action('greeting', ctx => ctx.scene.enter('CONTACT_DATA_WIZARD_SCENE_ID'))

const channels = ['-1001922987322']

async function check(ctx) {
	try {
		const channel = '@sportikzz'
		const updateId = ctx.update.message.from.id
		//–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ç–≥ –≥—Ä—É–ø –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø –µ—Å–ª–∏ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		const member = await ctx.telegram.getChatMember(channel, updateId)

		if (
			member.status === 'member' ||
			member.status === 'administrator' ||
			member.status === 'creator'
		) {
		} else {
			ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.')
		}
	} catch (error) {
		console.error(error)
		ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª.')
	}
}

bot.command('start', ctx => {
	ctx.replyWithHTML(
		'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –±–æ—Ç—É –ñ–æ–∑–µ—Ñ—É! –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –í–∞—à–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –∏ –∫–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ (—Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –í–∞—à—É —Ü–µ–ª—å –≤ —Å–∏–ª–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö) –∏ –ñ–æ–∑–µ—Ñ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –í–∞—à–∏—Ö —Ü–µ–ª–µ–π!<a href="https://t.me/sportikzz"> –ù–æ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–≥ –≥—Ä—É–ø–ø—É</a>',
		Markup.inlineKeyboard([
			Markup.button.callback('–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è', 'greeting'),
		])
	)
})
//–ü–æ–¥–∫–ª—é—á—É –∫–æ–º–∞–Ω–¥—É –∫ –∫–Ω–æ–ø–∫–∞–º .on('text', greeting())

bot.use(require('./composer/check.js'))

bot.hears(/money/i, ctx => ctx.reply('ü§ë'))

// bot.on(message('text'), async ctx => {
// 	try {
// 		//const response = await ChatGPT(ctx.message.text)
// 		//await ctx.reply(response)
// 	} catch (error) {
// 		console.log(error)
// 	}
// })

bot.on(message('sticker'), ctx => ctx.reply('üëç'))

bot.launch()
