const { Scenes, Markup } = require("telegraf")
const ChatGPT = require("../../chatgpt")

function greetingScene() {
    const greeting = new Scenes.WizardScene(
        "CONTACT_DATA_WIZARD_SCENE_ID", // first argument is Scene_ID, same as for BaseScene
        (ctx) => {
            ctx.reply("–î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è . –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
            ctx.wizard.state.firstDialog = {}
            return ctx.wizard.next()
        },
        (ctx) => {
            // validation example
            if (ctx.message.text.length < 2) {
                ctx.reply(`–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π—Ç–µ . –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è`)
                return
            }
            ctx.wizard.state.firstDialog.fio = ctx.message.text
            ctx.reply(`–ö–∞–∫–æ–π –≤–∞—à –≤–µ—Å ${ctx.message.text}?`)
            return ctx.wizard.next()
        },
        (ctx) => {
            ctx.wizard.state.firstDialog.weight = ctx.message.text
            ctx.reply(
                "–î–ª—è –Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–±–µ: —Ç–≤–æ–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ,—Ä–æ—Å—Ç,–ø–æ–ª, —Ç–µ–∫—É—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ, –Ω–∞–ª–∏—á–∏–∏ —Ç—Ä–∞–≤–º –∏–ª–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, —Ä–µ–∂–∏–º–µ –¥–Ω—è –∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é —Ç—ã –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!"
            )
            //await mySendContactDataMomentBeforeErase(ctx.wizard.state.contactData)
            return ctx.wizard.next()
        },
        (ctx) => {
            ctx.wizard.state.firstDialog.someInfo = ctx.message.text
            ctx.reply(
                "–¢–∞–∫–∂–µ –≤–∞–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–ª—å: —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ—Ö—É–¥–µ—Ç—å, –Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É, —É–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏–ª–∏ —Å–∏–ª—É. –ü–æ—ç—Ç–æ–º—É –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ü–µ–ª—å, —Ç–∞–∫ –∂–µ –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –µ–µ –¥–æ—Å—Ç–∏—á—åü§†"
            )
            return ctx.wizard.next()
        },
        async (ctx) => {
            ctx.reply("–ù–µ–π—Ä–æ—Å–µ—Ç—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...üîç")
            ctx.wizard.state.firstDialog.goal = ctx.message.text
            const response = await ChatGPT(
                ctx.wizard.state.firstDialog.fio,
                ctx.wizard.state.firstDialog.wight,
                ctx.wizard.state.firstDialog.someInfo,
                ctx.wizard.state.firstDialog.goal
            )
            await ctx.reply(
                response,
                Markup.inlineKeyboard([Markup.button.callback("–•–æ—á—É –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω", "other")])
            )
            return ctx.scene.leave()
        }
    )
    return greeting
}
module.exports.greetingScene = greetingScene()
